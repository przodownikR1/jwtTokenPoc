buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.spring.io/release" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'org.owasp:dependency-check-gradle:5.3.2'
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.8"
        classpath "com.adarshr:gradle-test-logger-plugin:${gradleTestLoggerVersion}"
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:${gradleGitPropertiesVersion}"
        classpath('com.palantir.gradle.docker:gradle-docker:0.25.0')
    }
}

plugins {
    id 'org.springframework.boot' version '2.3.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    //id 'org.asciidoctor.convert' version '1.5.8'
    id 'java'
}
apply plugin: 'java-library'
apply plugin: 'org.owasp.dependencycheck'
apply from: 'gradle/boot.gradle'
apply from: 'gradle/sonar.gradle'
apply from: 'gradle/spock.gradle'
apply from: 'gradle/test.gradle'
apply plugin: "com.adarshr.test-logger"
apply plugin: 'com.palantir.docker'
group = 'pl.scalatech.auth'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11



configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/release/" }
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    //JWT
    //implementation 'io.jsonwebtoken:jjwt:0.9.1'
    //java.lang.ClassNotFoundException: javax.xml.bind.DatatypeConverter


    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.1'
    runtime group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.1'
    runtime group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.1'
    //or
    implementation 'com.auth0:java-jwt:3.10.3'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // SWAGGER
    compile "io.springfox:springfox-swagger2:${springfoxSwaggerVersion}"
    compile "io.springfox:springfox-swagger-ui:${springfoxSwaggerVersion}"

    implementation group: 'com.tngtech.archunit', name: 'archunit', version: '0.13.1'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation "org.codehaus.groovy:groovy:3.0.3"

    testImplementation ('org.spockframework:spock-core:2.0-M2-groovy-3.0')
    testImplementation 'org.spockframework:spock-spring:2.0-M2-groovy-3.0'
    //testImplementation 'org.spockframework:spock-junit4:2.0-M2-groovy-3.0' //Temporary workaround for JUnit 4 rules
    testCompile "org.hamcrest:hamcrest-core:2.2"    // only necessary if Hamcrest matchers are used
    testRuntime "net.bytebuddy:byte-buddy:1.10.9"   // allows mocking of classes (in addition to interfaces)
    testRuntime "org.objenesis:objenesis:3.1"       // allows mocking of classes without default constructor (together with
    // CGLIB)
    /*spock report*/
    testCompile("com.athaydes:spock-reports:2.0-RC2") { transitive = false }
    testCompile 'org.slf4j:slf4j-api:1.7.30'
    testCompile 'org.slf4j:slf4j-simple:1.7.30'
    /*spock report*/
}
configurations {
    compileClasspath {
        resolutionStrategy.force 'org.codehaus.groovy:groovy:3.0.3'
    }
}

bootBuildImage {
    imageName="docker.io/library/jwttokenpoc:${project.version}"
}

/*asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}*/
task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}
docker {
    tags "${project.version}"
    dockerfile project.file('Dockerfile')
    name "${project.group}/${bootJar.archiveBaseName.getOrElse('cashsystem')}"
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])

}
testlogger {
    theme 'standard-parallel'
    showSummary true
    slowThreshold 20
    showPassed true
    showSkipped true
    showFailed true
    showSkippedStandardStreams true
    showFailedStandardStreams true
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}